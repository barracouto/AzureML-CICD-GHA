name: ML CI/CD - Train, Register, Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write # required for OIDC
  contents: read

jobs:
  ml-cicd:
    runs-on: ubuntu-latest
    environment: main
    env:
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      AZURE_WORKSPACE_NAME: ${{ vars.AZURE_WORKSPACE_NAME }}
      AML_COMPUTE: ${{ vars.AML_COMPUTE }}
      AML_ENDPOINT_NAME: ${{ vars.AML_ENDPOINT_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Azure CLI ML extension and libs
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml pytest
          az extension add -n ml --yes

      - name: Ensure workspace MI can write to storage (idempotent)
        run: |
          # Workspace managed identity principalId
          WS_MI=$(az resource show \
            -g "$AZURE_RESOURCE_GROUP" \
            -n "$AZURE_WORKSPACE_NAME" \
            --resource-type Microsoft.MachineLearningServices/workspaces \
            --query "identity.principalId" -o tsv)
          echo "Workspace MI: $WS_MI"

          # Default datastore -> storage account + its resource id
          STG_NAME=$(az ml datastore show \
            -n workspaceblobstore \
            -g "$AZURE_RESOURCE_GROUP" \
            -w "$AZURE_WORKSPACE_NAME" \
            --query "account_name" -o tsv)
          STG_ID=$(az storage account show \
            -g "$AZURE_RESOURCE_GROUP" -n "$STG_NAME" \
            --query id -o tsv)

          # Grant role if missing
          az role assignment list \
            --assignee "$WS_MI" \
            --scope "$STG_ID" \
            --query "[?roleDefinitionName=='Storage Blob Data Contributor']" -o tsv | grep -q . || \
          az role assignment create \
            --assignee "$WS_MI" \
            --role "Storage Blob Data Contributor" \
            --scope "$STG_ID"

          # If your compute has its own identity, grant it too (safe if none)
          COMP_MI=$(az ml compute show \
            -n "$AML_COMPUTE" -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --query "identity.principalId" -o tsv 2>/dev/null || echo "")
          if [ -n "$COMP_MI" ] && [ "$COMP_MI" != "None" ]; then
            az role assignment list --assignee "$COMP_MI" --scope "$STG_ID" \
              --query "[?roleDefinitionName=='Storage Blob Data Contributor']" -o tsv | grep -q . || \
            az role assignment create --assignee "$COMP_MI" --role "Storage Blob Data Contributor" --scope "$STG_ID"
          fi

      - name: Create/Update AML environment (idempotent)
        run: |
          az ml environment show \
            --name iris-env --version 1 \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME" >/dev/null 2>&1 || \
          az ml environment create \
            --file ml/env/environment.yaml \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"      

      - name: Run unit tests
        run: pytest -q

      - name: Submit AML training job and wait
        run: |
          az ml compute list \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME" -o table

          JOB_ID=$(az ml job create \
            --file ml/pipeline-job.yaml \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME" \
            --set compute=azureml:${AML_COMPUTE} \
            --query name -o tsv)

          echo "Submitted job: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> "$GITHUB_ENV"

          az ml job stream --name "$JOB_ID" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"

      - name: Verify training completed
        run: |
          STATUS=$(az ml job show -n "$JOB_ID" \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --query status -o tsv)
          echo "Job status: $STATUS"
          test "$STATUS" = "Completed"

      - name: Register model from job output
        run: |
          az ml model create \
            --name iris-model \
            --type custom_model \
            --path "azureml://jobs/${JOB_ID}/outputs/model_dir" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"

      # (optional)
      - name: Inspect job outputs
        run: |
          az ml job download --name "$JOB_ID" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME" \
            --download-path ./_job --all
          ls -R ./_job

      - name: Create endpoint (idempotent)
        run: |
          az ml online-endpoint show \
            --name "$AML_ENDPOINT_NAME" \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
          || az ml online-endpoint create \
               --name "$AML_ENDPOINT_NAME" \
               --file infra/endpoint.yaml \
               -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME"

      - name: Create/Update deployment
        run: |
          MODEL_VER=$(az ml model list --name iris-model \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --query "[-1].version" -o tsv)

          sed -i "s#azureml:iris-model:1#azureml:iris-model:${MODEL_VER}#g" infra/deployment.yaml

          az ml online-deployment create \
            --file infra/deployment.yaml \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --all-traffic

      # (Optional) Smoke test
      - name: Invoke endpoint (smoke test)
        run: |
          az ml online-endpoint invoke \
            --name "$AML_ENDPOINT_NAME" \
            --request-file request.json \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"
