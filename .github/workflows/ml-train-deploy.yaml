name: ML CI/CD - Train, Register, Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  ml-cicd:
    runs-on: ubuntu-latest
    environment: main
    env:
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      AZURE_WORKSPACE_NAME: ${{ vars.AZURE_WORKSPACE_NAME }}
      AML_COMPUTE: ${{ vars.AML_COMPUTE }}
      AML_ENDPOINT_NAME: ${{ vars.AML_ENDPOINT_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Azure CLI ML extension and libs
        run: |
          python -m pip install --upgrade pip
          pip install azure-ai-ml pytest
          az extension add -n ml --yes

      # Create env only if it doesn't already exist
      - name: Create/Update AML environment (idempotent)
        run: |
          az ml environment create \
            --file ml/env/environment.yaml \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"
            

      - name: Run unit tests
        run: pytest -q

      - name: Submit AML training job and wait
        run: |
          az ml compute list \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME" -o table

          JOB_ID=$(az ml job create \
            --file ml/pipeline-job.yaml \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME" \
            --set compute=azureml:${AML_COMPUTE} \
            --query name -o tsv)

          echo "Submitted job: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> "$GITHUB_ENV"

          az ml job stream --name "$JOB_ID" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"

      - name: Verify training completed
        run: |
          STATUS=$(az ml job show -n "$JOB_ID" \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --query status -o tsv)
          echo "Job status: $STATUS"
          test "$STATUS" = "Completed"

      - name: Register model from job output
        run: |
          az ml model create \
            --name iris-model-twopointoh \
            --type custom_model \
            --path "azureml://jobs/${JOB_ID}/outputs/model_dir" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"

      - name: Create endpoint (idempotent)
        run: |
          az ml online-endpoint show \
            --name "$AML_ENDPOINT_NAME" \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
          || az ml online-endpoint create \
               --name "$AML_ENDPOINT_NAME" \
               --file infra/endpoint.yaml \
               -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME"
      - name: Ensure inference environment exists (idempotent)
        run: |
          az ml environment show \
            --name iris-env-twopointoh --version 1 \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" >/dev/null 2>&1 || \
          az ml environment create \
            --file ml/env/environment.yaml \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME"

############################################
#                                          #
#                                          #
#  UPDATE DEPLOYMENT NAME AFTER EACH RUN   #
#         Line 133 in this step            #
#                                          #
#                                          #
############################################

      - name: Create/Update deployment
        run: |
          MODEL_VER=$(az ml model list --name iris-model \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --query "[-1].version" -o tsv)

          sed -i "s#azureml:iris-model:1#azureml:iris-model:${MODEL_VER}#g" infra/deployment.yaml

          az ml online-deployment create \
          --name stephanie-iris-deployment-8 \
            --file infra/deployment.yaml \
            -g "$AZURE_RESOURCE_GROUP" -w "$AZURE_WORKSPACE_NAME" \
            --set environment="azureml:iris-env-twopointoh:1" \
            --all-traffic

      - name: Invoke endpoint (smoke test)
        run: |
          az ml online-endpoint invoke \
            --name "$AML_ENDPOINT_NAME" \
            --request-file request.json \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --workspace-name "$AZURE_WORKSPACE_NAME"

###########################################
#  MONITORING & ALERTS VIA LOG ANALYTICS  #
###########################################

  monitor_and_alerts:
    name: Wire AML → LA + Alerts
    needs: ml-cicd
    runs-on: ubuntu-latest
    environment: main        # <— this is the key change
    permissions:
      id-token: write
      contents: read
    env:
      # Use the same repo/environment variables you already have
      AZURE_CLIENT_ID:       ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID:       ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # Resource names (reuse your vars so both jobs stay in sync)
      RESOURCE_GROUP:  ${{ vars.AZURE_RESOURCE_GROUP }}
      AML_WORKSPACE:   ${{ vars.AZURE_WORKSPACE_NAME }}
      ENDPOINT_NAME:   ${{ vars.AML_ENDPOINT_NAME }}
      DIAG_NAME: aml-to-la
      ACTION_GROUP: iris-alerts

    steps:
      - uses: actions/checkout@v4

      - name: Preflight – OIDC vars exist
        run: |
          test -n "${{ env.AZURE_CLIENT_ID }}"       || (echo "Missing AZURE_CLIENT_ID (repo Variable)"; exit 1)
          test -n "${{ env.AZURE_TENANT_ID }}"       || (echo "Missing AZURE_TENANT_ID (repo Variable)"; exit 1)
          test -n "${{ env.AZURE_SUBSCRIPTION_ID }}" || (echo "Missing AZURE_SUBSCRIPTION_ID (repo Variable)"; exit 1)

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure CLI extensions
        run: |
          az extension add -n ml -y || az extension update -n ml
          az extension add -n scheduled-query -y || az extension update -n scheduled-query

      - name: Preflight – show active subscription
        run: az account show --output table

      - name: Find resource IDs
        id: ids
        shell: bash
        run: |
          set -e
          WS_ID=$(az ml workspace show -g "$RESOURCE_GROUP" -n "$AML_WORKSPACE" --query id -o tsv)
          echo "WS_ID=$WS_ID" >> $GITHUB_OUTPUT

          # Pick a Log Analytics workspace in the same RG (change if you want a specific one)
          LAW_NAME=$(az monitor log-analytics workspace list -g "$RESOURCE_GROUP" --query "[0].name" -o tsv)
          if [ -z "$LAW_NAME" ] || [ "$LAW_NAME" = "null" ]; then
            echo "No Log Analytics workspace found in RG $RESOURCE_GROUP" >&2
            exit 1
          fi
          LA_ID=$(az monitor log-analytics workspace show -g "$RESOURCE_GROUP" -n "$LAW_NAME" --query id -o tsv)
          LA_LOC=$(az monitor log-analytics workspace show -g "$RESOURCE_GROUP" -n "$LAW_NAME" --query location -o tsv)
          echo "LA_ID=$LA_ID"   >> $GITHUB_OUTPUT
          echo "LA_LOC=$LA_LOC" >> $GITHUB_OUTPUT
          echo "Using LAW: $LAW_NAME ($LA_LOC)"

      - name: Create/Update diagnostic settings (AML → Log Analytics)
        shell: bash
        run: |
          set -e
          WS_ID="${{ steps.ids.outputs.WS_ID }}"
          NAME="$DIAG_NAME"
          EXISTS=$(az monitor diagnostic-settings list --resource "$WS_ID" --query "[?name=='$NAME'] | length(@)" -o tsv)
          if [ "$EXISTS" = "0" ]; then
            az monitor diagnostic-settings create \
              --name "$NAME" \
              --resource "$WS_ID" \
              --workspace "${{ steps.ids.outputs.LA_ID }}" \
              --logs '[{"categoryGroup":"AllLogs","enabled":true}]' \
              --metrics '[{"category":"AllMetrics","enabled":true}]'
          else
            az monitor diagnostic-settings update \
              --name "$NAME" \
              --resource "$WS_ID" \
              --workspace "${{ steps.ids.outputs.LA_ID }}" \
              --set logs='[{"categoryGroup":"AllLogs","enabled":true}]' \
                    metrics='[{"category":"AllMetrics","enabled":true}]'
          fi

      - name: Create/Update Action Group (email)
        shell: bash
        run: |
          set -e
          EMAIL="${{ secrets.ALERT_EMAIL }}"
          if [ -z "$EMAIL" ]; then EMAIL="${{ vars.ALERT_EMAIL }}"; fi
          if [ -z "$EMAIL" ]; then echo "Set ALERT_EMAIL (as a secret or variable)"; exit 1; fi

          if ! az monitor action-group show -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" >/dev/null 2>&1; then
            az monitor action-group create -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" --short-name iris \
              --email-receivers "[{ \"name\": \"primary\", \"emailAddress\": \"$EMAIL\" }]"
          else
            az monitor action-group update -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" \
              --set emailReceivers="[{'name':'primary','emailAddress':'$EMAIL'}]"
          fi

      - name: Create/Update Alert – 5xx failures in last 5m
        shell: bash
        run: |
          set -e
          LA_ID="${{ steps.ids.outputs.LA_ID }}"
          LA_LOC="${{ steps.ids.outputs.LA_LOC }}"
          RULE="iris-5xx-failures"
          QUERY="AmlOnlineEndpointAccessLogs | where TimeGenerated > ago(5m) | where EndpointName == '$ENDPOINT_NAME' and StatusCode >= 500"
          if az monitor scheduled-query show -g "$RESOURCE_GROUP" -n "$RULE" >/dev/null 2>&1; then
            az monitor scheduled-query update -g "$RESOURCE_GROUP" -n "$RULE" \
              --scopes "$LA_ID" --location "$LA_LOC" --severity 3 --evaluation-frequency 5m --window-size 5m \
              --action-groups "$(az monitor action-group show -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" --query id -o tsv)" \
              --condition "count 'Q1' > 0" \
              --condition-query "Q1=$QUERY"
          else
            az monitor scheduled-query create -g "$RESOURCE_GROUP" -n "$RULE" \
              --scopes "$LA_ID" --location "$LA_LOC" --severity 3 --evaluation-frequency 5m --window-size 5m \
              --action-groups "$(az monitor action-group show -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" --query id -o tsv)" \
              --condition "count 'Q1' > 0" \
              --condition-query "Q1=$QUERY" \
              --description "Any 5xx responses at iris-endpoint in the last 5 minutes."
          fi

      - name: Create/Update Alert – no predictions in last 10m
        shell: bash
        run: |
          set -e
          LA_ID="${{ steps.ids.outputs.LA_ID }}"
          LA_LOC="${{ steps.ids.outputs.LA_LOC }}"
          RULE="iris-no-predictions-10m"
          QUERY="AppTraces | where TimeGenerated > ago(10m) | where Message has 'predictions'"
          if az monitor scheduled-query show -g "$RESOURCE_GROUP" -n "$RULE" >/dev/null 2>&1; then
            az monitor scheduled-query update -g "$RESOURCE_GROUP" -n "$RULE" \
              --scopes "$LA_ID" --location "$LA_LOC" --severity 3 --evaluation-frequency 5m --window-size 10m \
              --action-groups "$(az monitor action-group show -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" --query id -o tsv)" \
              --condition "count 'Q2' < 1" \
              --condition-query "Q2=$QUERY"
          else
            az monitor scheduled-query create -g "$RESOURCE_GROUP" -n "$RULE" \
              --scopes "$LA_ID" --location "$LA_LOC" --severity 3 --evaluation-frequency 5m --window-size 10m \
              --action-groups "$(az monitor action-group show -g "$RESOURCE_GROUP" -n "$ACTION_GROUP" --query id -o tsv)" \
              --condition "count 'Q2' < 1" \
              --condition-query "Q2=$QUERY" \
              --description "No predictions traces in 10 minutes (endpoint likely unhealthy or idle)."
          fi

      - name: Smoke a request (creates fresh logs)
        shell: bash
        run: |
          echo '{"data":[[5.1,3.5,1.4,0.2]]}' > request.json
          az ml online-endpoint invoke -n "$ENDPOINT_NAME" --request-file request.json || true

      - name: Done
        run: echo "✅ Monitoring and alerting configured"
